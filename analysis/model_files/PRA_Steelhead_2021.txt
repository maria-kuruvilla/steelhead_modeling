model {

# Priors for detection probabilities 

	 JDA_p <- 1; # Single array, no upstream detections
	 JD1B0_p <- 0; # no detections / not in operation
	 JD1A0_p <- 1; # Single array, no upstream detections
	 TMF_p <- 1; # Single array, no upstream detections
	 PRV_p <- 0; # no detections / not in operation
	 HSTB0_p ~ dbeta(1, 1);
	 HSTA0_p ~ dbeta(1, 1);
	 MDRB0_p <- 0; # no detections / not in operation
	 MDRA0_p <- 1; # Single array, no upstream detections
	 ICHB0_p ~ dbeta(1, 1);
	 ICHA0_p ~ dbeta(1, 1);
	 PROB0_p ~ dbeta(1, 1);
	 PROA0_p ~ dbeta(1, 1);
	 RSHB0_p ~ dbeta(1, 1);
	 RSHA0_p ~ dbeta(1, 1);
	 PRHB0_p ~ dbeta(1, 1);
	 PRHA0_p ~ dbeta(1, 1);
	 RIA_p ~ dbeta(1, 1);
	 CLK_p <- 0; # no detections / not in operation
	 LWEB0_p ~ dbeta(1, 1);
	 LWEA0_p ~ dbeta(1, 1);
	 MCLB0_p ~ dbeta(1, 1);
	 MCLA0_p ~ dbeta(1, 1);
	 PESB0_p ~ dbeta(1, 1);
	 PESA0_p ~ dbeta(1, 1);
	 PEUB0_p ~ dbeta(1, 1);
	 PEUA0_p ~ dbeta(1, 1);
	 CHMB0_p ~ dbeta(1, 1);
	 CHMA0_p ~ dbeta(1, 1);
	 ICLB0_p ~ dbeta(1, 1);
	 ICLA0_p ~ dbeta(1, 1);
	 LNFB0_p <- 0; # no detections / not in operation
	 LNFA0_p <- 0; # no detections / not in operation
	 ICMB0_p ~ dbeta(1, 1);
	 ICMA0_p ~ dbeta(1, 1);
	 ICUB0_p <- 0; # no detections / not in operation
	 ICUA0_p <- 0; # no detections / not in operation
	 TUM_p ~ dbeta(1, 1);
	 CHWB0_p ~ dbeta(1, 1);
	 CHWA0_p ~ dbeta(1, 1);
	 CHLB0_p ~ dbeta(1, 1);
	 CHLA0_p ~ dbeta(1, 1);
	 CHUB0_p ~ dbeta(1, 1);
	 CHUA0_p ~ dbeta(1, 1);
	 UWE_p ~ dbeta(1, 1);
	 NALB0_p ~ dbeta(1, 1);
	 NALA0_p ~ dbeta(1, 1);
	 NAUB0_p ~ dbeta(1, 1);
	 NAUA0_p ~ dbeta(1, 1);
	 WTLB0_p <- 0; # no detections / not in operation
	 WTLA0_p <- 1; # Single array, no upstream detections
	 LWNB0_p <- 0; # no detections / not in operation
	 LWNA0_p <- 0; # no detections / not in operation
	 RRF_p ~ dbeta(1, 1);
	 EBOB0_p <- 1; # Single array, no upstream detections
	 ENLB0_p ~ dbeta(1, 1);
	 ENLA0_p ~ dbeta(1, 1);
	 RCTB0_p ~ dbeta(1, 1);
	 RCTA0_p ~ dbeta(1, 1);
	 EHLB0_p <- 0; # no detections / not in operation
	 EHLA0_p <- 0; # no detections / not in operation
	 ENAB0_p ~ dbeta(1, 1);
	 ENAA0_p ~ dbeta(1, 1);
	 MADB0_p ~ dbeta(1, 1);
	 MADA0_p ~ dbeta(1, 1);
	 ENFB0_p <- 0; # no detections / not in operation
	 ENFA0_p <- 0; # no detections / not in operation
	 WEHB0_p ~ dbeta(1, 1);
	 WEHA0_p ~ dbeta(1, 1);
	 WEA_p ~ dbeta(1, 1);
	 LMRB0_p ~ dbeta(1, 1);
	 LMRA0_p ~ dbeta(1, 1);
	 GLCB0_p ~ dbeta(1, 1);
	 GLCA0_p ~ dbeta(1, 1);
	 LBCB0_p ~ dbeta(1, 1);
	 LBCA0_p ~ dbeta(1, 1);
	 MRCB0_p ~ dbeta(1, 1);
	 MRCA0_p <- 0; # no detections / not in operation
	 BVCB0_p ~ dbeta(1, 1);
	 BVCA0_p ~ dbeta(1, 1);
	 TWRB0_p ~ dbeta(1, 1);
	 TWRA0_p ~ dbeta(1, 1);
	 TWISPW_p <- 1; # Single array, no upstream detections
	 CRWB0_p ~ dbeta(1, 1);
	 CRWA0_p ~ dbeta(1, 1);
	 CRUB0_p ~ dbeta(1, 1);
	 CRUA0_p ~ dbeta(1, 1);
	 SCPB0_p ~ dbeta(1, 1);
	 SCPA0_p ~ dbeta(1, 1);
	 MSHB0_p <- 0; # no detections / not in operation
	 MSHA0_p <- 0; # no detections / not in operation
	 METHB0_p <- 0; # no detections / not in operation
	 METHA0_p <- 0; # no detections / not in operation
	 MRWB0_p ~ dbeta(1, 1);
	 MRWA0_p ~ dbeta(1, 1);
	 WFC_p <- 1; # Single array, no upstream detections
	 OKLB0_p ~ dbeta(1, 1);
	 OKLA0_p ~ dbeta(1, 1);
	 LLCB0_p ~ dbeta(1, 1);
	 LLCA0_p ~ dbeta(1, 1);
	 SA1B0_p ~ dbeta(1, 1);
	 SA1A0_p ~ dbeta(1, 1);
	 SA0B0_p ~ dbeta(1, 1);
	 SA0A0_p ~ dbeta(1, 1);
	 OMKB0_p ~ dbeta(1, 1);
	 OMKA0_p ~ dbeta(1, 1);
	 OBF_p <- 1; # Single array, no upstream detections
	 WAN_p <- 0; # no detections / not in operation
	 JOH_p <- 0; # no detections / not in operation
	 TNK_p <- 1; # Single array, no upstream detections
	 AEN_p <- 0; # no detections / not in operation
	 BPCB0_p ~ dbeta(1, 1);
	 BPCA0_p ~ dbeta(1, 1);
	 ANTB0_p ~ dbeta(1, 1);
	 ANTA0_p ~ dbeta(1, 1);
	 WHS_p <- 1; # Single array, no upstream detections
	 ZSLB0_p ~ dbeta(1, 1);
	 ZSLA0_p ~ dbeta(1, 1);
	 TON_p <- 1; # Single array, no upstream detections
	 NMCB0_p ~ dbeta(1, 1);
	 NMCA0_p ~ dbeta(1, 1);
	 OKIB0_p <- 0; # no detections / not in operation
	 OKIA0_p <- 0; # no detections / not in operation
	 OKCB0_p ~ dbeta(1, 1);
	 OKCA0_p ~ dbeta(1, 1);
	 OKVB0_p ~ dbeta(1, 1);
	 OKVA0_p ~ dbeta(1, 1);
	 FST_p <- 1; # Single array, no upstream detections

# Priors for transition probabilities 

	 psi_PRA[1, 1:n_branch_PRA] ~ ddirch(PRA_dirch_vec[1,]); 
	 psi_PRA[2, 1:n_branch_PRA] ~ ddirch(PRA_dirch_vec[2,]); 

	 omega_PRA[1, 1:n_branch_PRA] <- zero_vec[1:(n_branch_PRA)]; 
	 omega_PRA[1, (n_branch_PRA + 1)] <- 1; 

	 omega_PRA[2, 1:n_branch_PRA] <- psi_PRA[1,]; 
	 omega_PRA[2, (n_branch_PRA + 1)] <- 0; 

	 omega_PRA[3, 1:n_branch_PRA] <- psi_PRA[2,]; 
	 omega_PRA[3, (n_branch_PRA + 1)] <- 0; 

	 psi_RIA[1, 1:n_branch_RIA] ~ ddirch(RIA_dirch_vec[1,]); 
	 psi_RIA[2, 1:n_branch_RIA] ~ ddirch(RIA_dirch_vec[2,]); 

	 omega_RIA[1, 1:n_branch_RIA] <- zero_vec[1:(n_branch_RIA)]; 
	 omega_RIA[1, (n_branch_RIA + 1)] <- 1; 

	 omega_RIA[2, 1:n_branch_RIA] <- psi_RIA[1,]; 
	 omega_RIA[2, (n_branch_RIA + 1)] <- 0; 

	 omega_RIA[3, 1:n_branch_RIA] <- psi_RIA[2,]; 
	 omega_RIA[3, (n_branch_RIA + 1)] <- 0; 

	 psi_WEA[1, 1:n_branch_WEA] ~ ddirch(WEA_dirch_vec[1,]); 
	 psi_WEA[2, 1:n_branch_WEA] ~ ddirch(WEA_dirch_vec[2,]); 

	 omega_WEA[1, 1:n_branch_WEA] <- zero_vec[1:(n_branch_WEA)]; 
	 omega_WEA[1, (n_branch_WEA + 1)] <- 1; 

	 omega_WEA[2, 1:n_branch_WEA] <- psi_WEA[1,]; 
	 omega_WEA[2, (n_branch_WEA + 1)] <- 0; 

	 omega_WEA[3, 1:n_branch_WEA] <- psi_WEA[2,]; 
	 omega_WEA[3, (n_branch_WEA + 1)] <- 0; 

	 psi_LMR[1, 1:n_branch_LMR] ~ ddirch(LMR_dirch_vec[1,]); 
	 psi_LMR[2, 1:n_branch_LMR] ~ ddirch(LMR_dirch_vec[2,]); 

	 omega_LMR[1, 1:n_branch_LMR] <- zero_vec[1:(n_branch_LMR)]; 
	 omega_LMR[1, (n_branch_LMR + 1)] <- 1; 

	 omega_LMR[2, 1:n_branch_LMR] <- psi_LMR[1,]; 
	 omega_LMR[2, (n_branch_LMR + 1)] <- 0; 

	 omega_LMR[3, 1:n_branch_LMR] <- psi_LMR[2,]; 
	 omega_LMR[3, (n_branch_LMR + 1)] <- 0; 

	 psi_MRC[1, 1:n_branch_MRC] ~ ddirch(MRC_dirch_vec[1,]); 
	 psi_MRC[2, 1:n_branch_MRC] ~ ddirch(MRC_dirch_vec[2,]); 

	 omega_MRC[1, 1:n_branch_MRC] <- zero_vec[1:(n_branch_MRC)]; 
	 omega_MRC[1, (n_branch_MRC + 1)] <- 1; 

	 omega_MRC[2, 1:n_branch_MRC] <- psi_MRC[1,]; 
	 omega_MRC[2, (n_branch_MRC + 1)] <- 0; 

	 omega_MRC[3, 1:n_branch_MRC] <- psi_MRC[2,]; 
	 omega_MRC[3, (n_branch_MRC + 1)] <- 0; 

	 psi_OKL[1, 1:n_branch_OKL] ~ ddirch(OKL_dirch_vec[1,]); 
	 psi_OKL[2, 1:n_branch_OKL] ~ ddirch(OKL_dirch_vec[2,]); 

	 omega_OKL[1, 1:n_branch_OKL] <- zero_vec[1:(n_branch_OKL)]; 
	 omega_OKL[1, (n_branch_OKL + 1)] <- 1; 

	 omega_OKL[2, 1:n_branch_OKL] <- psi_OKL[1,]; 
	 omega_OKL[2, (n_branch_OKL + 1)] <- 0; 

	 omega_OKL[3, 1:n_branch_OKL] <- psi_OKL[2,]; 
	 omega_OKL[3, (n_branch_OKL + 1)] <- 0; 

	 psi_LWE[1, 1:n_branch_LWE] ~ ddirch(LWE_dirch_vec[1,]); 
	 psi_LWE[2, 1:n_branch_LWE] ~ ddirch(LWE_dirch_vec[2,]); 

	 omega_LWE[1, 1:n_branch_LWE] <- zero_vec[1:(n_branch_LWE)]; 
	 omega_LWE[1, (n_branch_LWE + 1)] <- 1; 

	 omega_LWE[2, 1:n_branch_LWE] <- psi_LWE[1,]; 
	 omega_LWE[2, (n_branch_LWE + 1)] <- 0; 

	 omega_LWE[3, 1:n_branch_LWE] <- psi_LWE[2,]; 
	 omega_LWE[3, (n_branch_LWE + 1)] <- 0; 

	 psi_PRV[1, 1:n_branch_PRV] ~ ddirch(PRV_dirch_vec[1,]); 
	 psi_PRV[2, 1:n_branch_PRV] ~ ddirch(PRV_dirch_vec[2,]); 

	 omega_PRV[1, 1:n_branch_PRV] <- zero_vec[1:(n_branch_PRV)]; 
	 omega_PRV[1, (n_branch_PRV + 1)] <- 1; 

	 omega_PRV[2, 1:n_branch_PRV] <- psi_PRV[1,]; 
	 omega_PRV[2, (n_branch_PRV + 1)] <- 0; 

	 omega_PRV[3, 1:n_branch_PRV] <- psi_PRV[2,]; 
	 omega_PRV[3, (n_branch_PRV + 1)] <- 0; 

	 psi_ICL[1, 1:n_branch_ICL] ~ ddirch(ICL_dirch_vec[1,]); 
	 psi_ICL[2, 1:n_branch_ICL] ~ ddirch(ICL_dirch_vec[2,]); 

	 omega_ICL[1, 1:n_branch_ICL] <- zero_vec[1:(n_branch_ICL)]; 
	 omega_ICL[1, (n_branch_ICL + 1)] <- 1; 

	 omega_ICL[2, 1:n_branch_ICL] <- psi_ICL[1,]; 
	 omega_ICL[2, (n_branch_ICL + 1)] <- 0; 

	 omega_ICL[3, 1:n_branch_ICL] <- psi_ICL[2,]; 
	 omega_ICL[3, (n_branch_ICL + 1)] <- 0; 

	 psi_TUM[1, 1:n_branch_TUM] ~ ddirch(TUM_dirch_vec[1,]); 
	 psi_TUM[2, 1:n_branch_TUM] ~ ddirch(TUM_dirch_vec[2,]); 

	 omega_TUM[1, 1:n_branch_TUM] <- zero_vec[1:(n_branch_TUM)]; 
	 omega_TUM[1, (n_branch_TUM + 1)] <- 1; 

	 omega_TUM[2, 1:n_branch_TUM] <- psi_TUM[1,]; 
	 omega_TUM[2, (n_branch_TUM + 1)] <- 0; 

	 omega_TUM[3, 1:n_branch_TUM] <- psi_TUM[2,]; 
	 omega_TUM[3, (n_branch_TUM + 1)] <- 0; 

	 phi_MSH[1] <- 0 # no upstream detections
	 phi_MSH[2] <- 0 # no upstream detections

	 phi_MRW[1] <- 0 # no upstream detections
	 phi_MRW[2] ~ dbeta(1, 1); 

	 psi_ENL[1, 1:n_branch_ENL] ~ ddirch(ENL_dirch_vec[1,]); 
	 psi_ENL[2, 1:n_branch_ENL] ~ ddirch(ENL_dirch_vec[2,]); 

	 omega_ENL[1, 1:n_branch_ENL] <- zero_vec[1:(n_branch_ENL)]; 
	 omega_ENL[1, (n_branch_ENL + 1)] <- 1; 

	 omega_ENL[2, 1:n_branch_ENL] <- psi_ENL[1,]; 
	 omega_ENL[2, (n_branch_ENL + 1)] <- 0; 

	 omega_ENL[3, 1:n_branch_ENL] <- psi_ENL[2,]; 
	 omega_ENL[3, (n_branch_ENL + 1)] <- 0; 

	 phi_TWR[1] ~ dbeta(1, 1); 
	 phi_TWR[2] ~ dbeta(1, 1); 

	 phi_ENA[1] <- 0 # no upstream detections
	 phi_ENA[2] <- 0 # no upstream detections

	 phi_CRW[1] ~ dbeta(1, 1); 
	 phi_CRW[2] ~ dbeta(1, 1); 

	 phi_ICM[1] <- 0 # no upstream detections
	 phi_ICM[2] <- 0 # no upstream detections

	 psi_UWE[1, 1:n_branch_UWE] ~ ddirch(UWE_dirch_vec[1,]); 
	 psi_UWE[2, 1:n_branch_UWE] ~ ddirch(UWE_dirch_vec[2,]); 

	 omega_UWE[1, 1:n_branch_UWE] <- zero_vec[1:(n_branch_UWE)]; 
	 omega_UWE[1, (n_branch_UWE + 1)] <- 1; 

	 omega_UWE[2, 1:n_branch_UWE] <- psi_UWE[1,]; 
	 omega_UWE[2, (n_branch_UWE + 1)] <- 0; 

	 omega_UWE[3, 1:n_branch_UWE] <- psi_UWE[2,]; 
	 omega_UWE[3, (n_branch_UWE + 1)] <- 0; 

	 phi_OKC[1] <- 0 # no upstream detections
	 phi_OKC[2] ~ dbeta(1, 1); 

	 phi_CHL[1] ~ dbeta(1, 1); 
	 phi_CHL[2] ~ dbeta(1, 1); 

	 phi_PES[1] ~ dbeta(1, 1); 
	 phi_PES[2] <- 0 # no upstream detections

	 phi_SA1[1] ~ dbeta(1, 1); 
	 phi_SA1[2] ~ dbeta(1, 1); 

	 phi_OMK[1] <- 0 # no upstream detections
	 phi_OMK[2] ~ dbeta(1, 1); 

	 phi_NAL[1] ~ dbeta(1, 1); 
	 phi_NAL[2] ~ dbeta(1, 1); 

	 psi_ZSL[1, 1:n_branch_ZSL] ~ ddirch(ZSL_dirch_vec[1,]); 
	 psi_ZSL[2, 1:n_branch_ZSL] ~ ddirch(ZSL_dirch_vec[2,]); 

	 omega_ZSL[1, 1:n_branch_ZSL] <- zero_vec[1:(n_branch_ZSL)]; 
	 omega_ZSL[1, (n_branch_ZSL + 1)] <- 1; 

	 omega_ZSL[2, 1:n_branch_ZSL] <- psi_ZSL[1,]; 
	 omega_ZSL[2, (n_branch_ZSL + 1)] <- 0; 

	 omega_ZSL[3, 1:n_branch_ZSL] <- psi_ZSL[2,]; 
	 omega_ZSL[3, (n_branch_ZSL + 1)] <- 0; 

	 psi_RRF[1, 1:n_branch_RRF] ~ ddirch(RRF_dirch_vec[1,]); 
	 psi_RRF[2, 1:n_branch_RRF] ~ ddirch(RRF_dirch_vec[2,]); 

	 omega_RRF[1, 1:n_branch_RRF] <- zero_vec[1:(n_branch_RRF)]; 
	 omega_RRF[1, (n_branch_RRF + 1)] <- 1; 

	 omega_RRF[2, 1:n_branch_RRF] <- psi_RRF[1,]; 
	 omega_RRF[2, (n_branch_RRF + 1)] <- 0; 

	 omega_RRF[3, 1:n_branch_RRF] <- psi_RRF[2,]; 
	 omega_RRF[3, (n_branch_RRF + 1)] <- 0; 

# Where is each fish? 

	 for(i in 1:n_fish) { 


		 a_PRA[i] ~ dcat( omega_PRA[fish_type[i] + 1, 1:(n_branch_PRA+1)] ) 
			 for (j in 1:n_branch_PRA)	{ 
				 eta_PRA[i,j] <- equals(a_PRA[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_RIA[i] ~ dcat( omega_RIA[(eta_PRA[i,9] * fish_type[i] + 1), 1:(n_branch_RIA+1)] ) 
			 for (j in 1:n_branch_RIA)	{ 
				 eta_RIA[i,j] <- equals(a_RIA[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_WEA[i] ~ dcat( omega_WEA[(eta_RRF[i,4] * fish_type[i] + 1), 1:(n_branch_WEA+1)] ) 
			 for (j in 1:n_branch_WEA)	{ 
				 eta_WEA[i,j] <- equals(a_WEA[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_LMR[i] ~ dcat( omega_LMR[(eta_WEA[i,1] * fish_type[i] + 1), 1:(n_branch_LMR+1)] ) 
			 for (j in 1:n_branch_LMR)	{ 
				 eta_LMR[i,j] <- equals(a_LMR[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_MRC[i] ~ dcat( omega_MRC[(eta_LMR[i,3] * fish_type[i] + 1), 1:(n_branch_MRC+1)] ) 
			 for (j in 1:n_branch_MRC)	{ 
				 eta_MRC[i,j] <- equals(a_MRC[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_OKL[i] ~ dcat( omega_OKL[(eta_WEA[i,2] * fish_type[i] + 1), 1:(n_branch_OKL+1)] ) 
			 for (j in 1:n_branch_OKL)	{ 
				 eta_OKL[i,j] <- equals(a_OKL[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_LWE[i] ~ dcat( omega_LWE[(eta_RIA[i,2] * fish_type[i] + 1), 1:(n_branch_LWE+1)] ) 
			 for (j in 1:n_branch_LWE)	{ 
				 eta_LWE[i,j] <- equals(a_LWE[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_PRV[i] ~ dcat( omega_PRV[(eta_PRA[i,4] * fish_type[i] + 1), 1:(n_branch_PRV+1)] ) 
			 for (j in 1:n_branch_PRV)	{ 
				 eta_PRV[i,j] <- equals(a_PRV[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_ICL[i] ~ dcat( omega_ICL[(eta_LWE[i,4] * fish_type[i] + 1), 1:(n_branch_ICL+1)] ) 
			 for (j in 1:n_branch_ICL)	{ 
				 eta_ICL[i,j] <- equals(a_ICL[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_TUM[i] ~ dcat( omega_TUM[(eta_LWE[i,5] * fish_type[i] + 1), 1:(n_branch_TUM+1)] ) 
			 for (j in 1:n_branch_TUM)	{ 
				 eta_TUM[i,j] <- equals(a_TUM[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_MSH[i] ~ dbern(eta_MRC[i, 5] * phi_MSH[fish_type[i]]) 

		 eta_MRW[i] ~ dbern(eta_MRC[i, 6] * phi_MRW[fish_type[i]]) 

		 a_ENL[i] ~ dcat( omega_ENL[(eta_RRF[i,2] * fish_type[i] + 1), 1:(n_branch_ENL+1)] ) 
			 for (j in 1:n_branch_ENL)	{ 
				 eta_ENL[i,j] <- equals(a_ENL[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_TWR[i] ~ dbern(eta_MRC[i, 2] * phi_TWR[fish_type[i]]) 

		 eta_ENA[i] ~ dbern(eta_ENL[i, 3] * phi_ENA[fish_type[i]]) 

		 eta_CRW[i] ~ dbern(eta_MRC[i, 3] * phi_CRW[fish_type[i]]) 

		 eta_ICM[i] ~ dbern(eta_ICL[i, 2] * phi_ICM[fish_type[i]]) 

		 a_UWE[i] ~ dcat( omega_UWE[(eta_TUM[i,3] * fish_type[i] + 1), 1:(n_branch_UWE+1)] ) 
			 for (j in 1:n_branch_UWE)	{ 
				 eta_UWE[i,j] <- equals(a_UWE[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 eta_OKC[i] ~ dbern(eta_ZSL[i, 4] * phi_OKC[fish_type[i]]) 

		 eta_CHL[i] ~ dbern(eta_TUM[i, 2] * phi_CHL[fish_type[i]]) 

		 eta_PES[i] ~ dbern(eta_LWE[i, 2] * phi_PES[fish_type[i]]) 

		 eta_SA1[i] ~ dbern(eta_OKL[i, 2] * phi_SA1[fish_type[i]]) 

		 eta_OMK[i] ~ dbern(eta_OKL[i, 3] * phi_OMK[fish_type[i]]) 

		 eta_NAL[i] ~ dbern(eta_UWE[i, 1] * phi_NAL[fish_type[i]]) 

		 a_ZSL[i] ~ dcat( omega_ZSL[(eta_OKL[i,11] * fish_type[i] + 1), 1:(n_branch_ZSL+1)] ) 
			 for (j in 1:n_branch_ZSL)	{ 
				 eta_ZSL[i,j] <- equals(a_ZSL[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

		 a_RRF[i] ~ dcat( omega_RRF[(eta_RIA[i,3] * fish_type[i] + 1), 1:(n_branch_RRF+1)] ) 
			 for (j in 1:n_branch_RRF)	{ 
				 eta_RRF[i,j] <- equals(a_RRF[i],j) # equals(x,y) is a test for equality, returns [1,0] 
			 }

	} # end the n_fish loop 


# Were tags observed? 

	 for (i in 1:n_fish) {

		 cap_hist[i,1] ~ dbern( JDA_p * eta_PRA[i,1] );

		 cap_hist[i,2] ~ dbern( JD1B0_p * eta_PRA[i,2] );

		 cap_hist[i,3] ~ dbern( JD1A0_p * eta_PRA[i,2] );

		 cap_hist[i,4] ~ dbern( TMF_p * eta_PRA[i,3] );

		 cap_hist[i,5] ~ dbern( PRV_p * eta_PRA[i,4] );

		 cap_hist[i,6] ~ dbern( HSTB0_p * eta_PRV[i,1] );

		 cap_hist[i,7] ~ dbern( HSTA0_p * eta_PRV[i,1] );

		 cap_hist[i,8] ~ dbern( MDRB0_p * eta_PRV[i,2] );

		 cap_hist[i,9] ~ dbern( MDRA0_p * eta_PRV[i,2] );

		 cap_hist[i,10] ~ dbern( ICHB0_p * eta_PRA[i,5] );

		 cap_hist[i,11] ~ dbern( ICHA0_p * eta_PRA[i,5] );

		 cap_hist[i,12] ~ dbern( PROB0_p * eta_PRA[i,6] );

		 cap_hist[i,13] ~ dbern( PROA0_p * eta_PRA[i,6] );

		 cap_hist[i,14] ~ dbern( RSHB0_p * eta_PRA[i,7] );

		 cap_hist[i,15] ~ dbern( RSHA0_p * eta_PRA[i,7] );

		 cap_hist[i,16] ~ dbern( PRHB0_p * eta_PRA[i,8] );

		 cap_hist[i,17] ~ dbern( PRHA0_p * eta_PRA[i,8] );

		 cap_hist[i,18] ~ dbern( RIA_p * eta_PRA[i,9] );

		 cap_hist[i,19] ~ dbern( CLK_p * eta_RIA[i,1] );

		 cap_hist[i,20] ~ dbern( LWEB0_p * eta_RIA[i,2] );

		 cap_hist[i,21] ~ dbern( LWEA0_p * eta_RIA[i,2] );

		 cap_hist[i,22] ~ dbern( MCLB0_p * eta_LWE[i,1] );

		 cap_hist[i,23] ~ dbern( MCLA0_p * eta_LWE[i,1] );

		 cap_hist[i,24] ~ dbern( PESB0_p * eta_LWE[i,2] );

		 cap_hist[i,25] ~ dbern( PESA0_p * eta_LWE[i,2] );

		 cap_hist[i,26] ~ dbern( PEUB0_p * eta_PES[i] );

		 cap_hist[i,27] ~ dbern( PEUA0_p * eta_PES[i] );

		 cap_hist[i,28] ~ dbern( CHMB0_p * eta_LWE[i,3] );

		 cap_hist[i,29] ~ dbern( CHMA0_p * eta_LWE[i,3] );

		 cap_hist[i,30] ~ dbern( ICLB0_p * eta_LWE[i,4] );

		 cap_hist[i,31] ~ dbern( ICLA0_p * eta_LWE[i,4] );

		 cap_hist[i,32] ~ dbern( LNFB0_p * eta_ICL[i,1] );

		 cap_hist[i,33] ~ dbern( LNFA0_p * eta_ICL[i,1] );

		 cap_hist[i,34] ~ dbern( ICMB0_p * eta_ICL[i,2] );

		 cap_hist[i,35] ~ dbern( ICMA0_p * eta_ICL[i,2] );

		 cap_hist[i,36] ~ dbern( ICUB0_p * eta_ICM[i] );

		 cap_hist[i,37] ~ dbern( ICUA0_p * eta_ICM[i] );

		 cap_hist[i,38] ~ dbern( TUM_p * eta_LWE[i,5] );

		 cap_hist[i,39] ~ dbern( CHWB0_p * eta_TUM[i,1] );

		 cap_hist[i,40] ~ dbern( CHWA0_p * eta_TUM[i,1] );

		 cap_hist[i,41] ~ dbern( CHLB0_p * eta_TUM[i,2] );

		 cap_hist[i,42] ~ dbern( CHLA0_p * eta_TUM[i,2] );

		 cap_hist[i,43] ~ dbern( CHUB0_p * eta_CHL[i] );

		 cap_hist[i,44] ~ dbern( CHUA0_p * eta_CHL[i] );

		 cap_hist[i,45] ~ dbern( UWE_p * eta_TUM[i,3] );

		 cap_hist[i,46] ~ dbern( NALB0_p * eta_UWE[i,1] );

		 cap_hist[i,47] ~ dbern( NALA0_p * eta_UWE[i,1] );

		 cap_hist[i,48] ~ dbern( NAUB0_p * eta_NAL[i] );

		 cap_hist[i,49] ~ dbern( NAUA0_p * eta_NAL[i] );

		 cap_hist[i,50] ~ dbern( WTLB0_p * eta_UWE[i,2] );

		 cap_hist[i,51] ~ dbern( WTLA0_p * eta_UWE[i,2] );

		 cap_hist[i,52] ~ dbern( LWNB0_p * eta_UWE[i,3] );

		 cap_hist[i,53] ~ dbern( LWNA0_p * eta_UWE[i,3] );

		 cap_hist[i,54] ~ dbern( RRF_p * eta_RIA[i,3] );

		 cap_hist[i,55] ~ dbern( EBOB0_p * eta_RRF[i,1] );

		 cap_hist[i,56] ~ dbern( ENLB0_p * eta_RRF[i,2] );

		 cap_hist[i,57] ~ dbern( ENLA0_p * eta_RRF[i,2] );

		 cap_hist[i,58] ~ dbern( RCTB0_p * eta_ENL[i,1] );

		 cap_hist[i,59] ~ dbern( RCTA0_p * eta_ENL[i,1] );

		 cap_hist[i,60] ~ dbern( EHLB0_p * eta_ENL[i,2] );

		 cap_hist[i,61] ~ dbern( EHLA0_p * eta_ENL[i,2] );

		 cap_hist[i,62] ~ dbern( ENAB0_p * eta_ENL[i,3] );

		 cap_hist[i,63] ~ dbern( ENAA0_p * eta_ENL[i,3] );

		 cap_hist[i,64] ~ dbern( MADB0_p * eta_ENL[i,4] );

		 cap_hist[i,65] ~ dbern( MADA0_p * eta_ENL[i,4] );

		 cap_hist[i,66] ~ dbern( ENFB0_p * eta_ENA[i] );

		 cap_hist[i,67] ~ dbern( ENFA0_p * eta_ENA[i] );

		 cap_hist[i,68] ~ dbern( WEHB0_p * eta_RRF[i,3] );

		 cap_hist[i,69] ~ dbern( WEHA0_p * eta_RRF[i,3] );

		 cap_hist[i,70] ~ dbern( WEA_p * eta_RRF[i,4] );

		 cap_hist[i,71] ~ dbern( LMRB0_p * eta_WEA[i,1] );

		 cap_hist[i,72] ~ dbern( LMRA0_p * eta_WEA[i,1] );

		 cap_hist[i,73] ~ dbern( GLCB0_p * eta_LMR[i,1] );

		 cap_hist[i,74] ~ dbern( GLCA0_p * eta_LMR[i,1] );

		 cap_hist[i,75] ~ dbern( LBCB0_p * eta_LMR[i,2] );

		 cap_hist[i,76] ~ dbern( LBCA0_p * eta_LMR[i,2] );

		 cap_hist[i,77] ~ dbern( MRCB0_p * eta_LMR[i,3] );

		 cap_hist[i,78] ~ dbern( MRCA0_p * eta_LMR[i,3] );

		 cap_hist[i,79] ~ dbern( BVCB0_p * eta_MRC[i,1] );

		 cap_hist[i,80] ~ dbern( BVCA0_p * eta_MRC[i,1] );

		 cap_hist[i,81] ~ dbern( TWRB0_p * eta_MRC[i,2] );

		 cap_hist[i,82] ~ dbern( TWRA0_p * eta_MRC[i,2] );

		 cap_hist[i,83] ~ dbern( TWISPW_p * eta_TWR[i] );

		 cap_hist[i,84] ~ dbern( CRWB0_p * eta_MRC[i,3] );

		 cap_hist[i,85] ~ dbern( CRWA0_p * eta_MRC[i,3] );

		 cap_hist[i,86] ~ dbern( CRUB0_p * eta_CRW[i] );

		 cap_hist[i,87] ~ dbern( CRUA0_p * eta_CRW[i] );

		 cap_hist[i,88] ~ dbern( SCPB0_p * eta_MRC[i,4] );

		 cap_hist[i,89] ~ dbern( SCPA0_p * eta_MRC[i,4] );

		 cap_hist[i,90] ~ dbern( MSHB0_p * eta_MRC[i,5] );

		 cap_hist[i,91] ~ dbern( MSHA0_p * eta_MRC[i,5] );

		 cap_hist[i,92] ~ dbern( METHB0_p * eta_MSH[i] );

		 cap_hist[i,93] ~ dbern( METHA0_p * eta_MSH[i] );

		 cap_hist[i,94] ~ dbern( MRWB0_p * eta_MRC[i,6] );

		 cap_hist[i,95] ~ dbern( MRWA0_p * eta_MRC[i,6] );

		 cap_hist[i,96] ~ dbern( WFC_p * eta_MRW[i] );

		 cap_hist[i,97] ~ dbern( OKLB0_p * eta_WEA[i,2] );

		 cap_hist[i,98] ~ dbern( OKLA0_p * eta_WEA[i,2] );

		 cap_hist[i,99] ~ dbern( LLCB0_p * eta_OKL[i,1] );

		 cap_hist[i,100] ~ dbern( LLCA0_p * eta_OKL[i,1] );

		 cap_hist[i,101] ~ dbern( SA1B0_p * eta_OKL[i,2] );

		 cap_hist[i,102] ~ dbern( SA1A0_p * eta_OKL[i,2] );

		 cap_hist[i,103] ~ dbern( SA0B0_p * eta_SA1[i] );

		 cap_hist[i,104] ~ dbern( SA0A0_p * eta_SA1[i] );

		 cap_hist[i,105] ~ dbern( OMKB0_p * eta_OKL[i,3] );

		 cap_hist[i,106] ~ dbern( OMKA0_p * eta_OKL[i,3] );

		 cap_hist[i,107] ~ dbern( OBF_p * eta_OMK[i] );

		 cap_hist[i,108] ~ dbern( WAN_p * eta_OKL[i,4] );

		 cap_hist[i,109] ~ dbern( JOH_p * eta_OKL[i,5] );

		 cap_hist[i,110] ~ dbern( TNK_p * eta_OKL[i,6] );

		 cap_hist[i,111] ~ dbern( AEN_p * eta_OKL[i,7] );

		 cap_hist[i,112] ~ dbern( BPCB0_p * eta_OKL[i,8] );

		 cap_hist[i,113] ~ dbern( BPCA0_p * eta_OKL[i,8] );

		 cap_hist[i,114] ~ dbern( ANTB0_p * eta_OKL[i,9] );

		 cap_hist[i,115] ~ dbern( ANTA0_p * eta_OKL[i,9] );

		 cap_hist[i,116] ~ dbern( WHS_p * eta_OKL[i,10] );

		 cap_hist[i,117] ~ dbern( ZSLB0_p * eta_OKL[i,11] );

		 cap_hist[i,118] ~ dbern( ZSLA0_p * eta_OKL[i,11] );

		 cap_hist[i,119] ~ dbern( TON_p * eta_ZSL[i,1] );

		 cap_hist[i,120] ~ dbern( NMCB0_p * eta_ZSL[i,2] );

		 cap_hist[i,121] ~ dbern( NMCA0_p * eta_ZSL[i,2] );

		 cap_hist[i,122] ~ dbern( OKIB0_p * eta_ZSL[i,3] );

		 cap_hist[i,123] ~ dbern( OKIA0_p * eta_ZSL[i,3] );

		 cap_hist[i,124] ~ dbern( OKCB0_p * eta_ZSL[i,4] );

		 cap_hist[i,125] ~ dbern( OKCA0_p * eta_ZSL[i,4] );

		 cap_hist[i,126] ~ dbern( OKVB0_p * eta_OKC[i] );

		 cap_hist[i,127] ~ dbern( OKVA0_p * eta_OKC[i] );

		 cap_hist[i,128] ~ dbern( FST_p * eta_WEA[i,3] );

	}  # end the n_fish loop 
}
